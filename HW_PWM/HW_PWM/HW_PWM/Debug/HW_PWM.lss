
HW_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000ad2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023d4  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c58  00000000  00000000  00003104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d6e  00000000  00000000  00003d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00004acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf6  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016d0  00000000  00000000  00005c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007346  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8c 01 	call	0x318	; 0x318 <main>
  74:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MotorDC_Init>:
#include "gpio.h"
#include "dcMotor.h"
#include "timers.h"
void MotorDC_Init(En_motorType_t en_motor_number)
{
	 switch(en_motor_number)
  7c:	88 23       	and	r24, r24
  7e:	19 f0       	breq	.+6      	; 0x86 <MotorDC_Init+0xa>
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	89 f0       	breq	.+34     	; 0xa6 <MotorDC_Init+0x2a>
  84:	08 95       	ret
	 {
		  case MOT_1: 
		  {
				gpioPinDirection(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,OUTPUT);
  86:	4f ef       	ldi	r20, 0xFF	; 255
  88:	64 e0       	ldi	r22, 0x04	; 4
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
				gpioPinDirection(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,OUTPUT);
  90:	4f ef       	ldi	r20, 0xFF	; 255
  92:	68 e0       	ldi	r22, 0x08	; 8
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
				gpioPinDirection(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,OUTPUT);
  9a:	4f ef       	ldi	r20, 0xFF	; 255
  9c:	60 e1       	ldi	r22, 0x10	; 16
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
				break;
  a4:	08 95       	ret
		  }
		  case MOT_2:
		  {
			  gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,OUTPUT);
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	60 e4       	ldi	r22, 0x40	; 64
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
			  gpioPinDirection(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,OUTPUT);
  b0:	4f ef       	ldi	r20, 0xFF	; 255
  b2:	60 e8       	ldi	r22, 0x80	; 128
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
			  gpioPinDirection(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,OUTPUT);
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	60 e2       	ldi	r22, 0x20	; 32
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
  c4:	08 95       	ret

000000c6 <MotorDC_Dir>:
	 }
}

void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
	 if (en_motor_number==MOT_1)
  c6:	81 11       	cpse	r24, r1
  c8:	27 c0       	rjmp	.+78     	; 0x118 <MotorDC_Dir+0x52>
	 {
		  	switch (en_motor_dir)
  ca:	61 30       	cpi	r22, 0x01	; 1
  cc:	79 f0       	breq	.+30     	; 0xec <MotorDC_Dir+0x26>
  ce:	18 f0       	brcs	.+6      	; 0xd6 <MotorDC_Dir+0x10>
  d0:	62 30       	cpi	r22, 0x02	; 2
  d2:	b9 f0       	breq	.+46     	; 0x102 <MotorDC_Dir+0x3c>
  d4:	08 95       	ret
				{
					 case (STOP):
					 {
						  gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	64 e0       	ldi	r22, 0x04	; 4
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						  gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	68 e0       	ldi	r22, 0x08	; 8
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						  break;
  ea:	08 95       	ret
					 }
					 case (FORWARD):
					 {
						 gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						 gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	68 e0       	ldi	r22, 0x08	; 8
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						 break;
 100:	08 95       	ret
					 }
					 case (BACKWARD):
					 {
						 gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	64 e0       	ldi	r22, 0x04	; 4
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						 gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
 10c:	4f ef       	ldi	r20, 0xFF	; 255
 10e:	68 e0       	ldi	r22, 0x08	; 8
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						 break;
 116:	08 95       	ret
					 
				}
		  }
		  else  //case motor 2
		  {
				switch (en_motor_dir)
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	79 f0       	breq	.+30     	; 0x13a <MotorDC_Dir+0x74>
 11c:	18 f0       	brcs	.+6      	; 0x124 <MotorDC_Dir+0x5e>
 11e:	62 30       	cpi	r22, 0x02	; 2
 120:	b9 f0       	breq	.+46     	; 0x150 <MotorDC_Dir+0x8a>
 122:	08 95       	ret
				{
					 case (STOP):
					 {
						  gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	60 e4       	ldi	r22, 0x40	; 64
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						  gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	60 e8       	ldi	r22, 0x80	; 128
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						  break;
 138:	08 95       	ret
					 }
					 case (FORWARD):
					 {
						  gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
 13a:	4f ef       	ldi	r20, 0xFF	; 255
 13c:	60 e4       	ldi	r22, 0x40	; 64
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						  gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	60 e8       	ldi	r22, 0x80	; 128
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						  break;
 14e:	08 95       	ret
					 }
					 case (BACKWARD):
					 {
						  gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	60 e4       	ldi	r22, 0x40	; 64
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
						  gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
 15a:	4f ef       	ldi	r20, 0xFF	; 255
 15c:	60 e8       	ldi	r22, 0x80	; 128
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
 164:	08 95       	ret

00000166 <gpioPinDirection>:
/* This function determine the direction of a specific Pin or pins by ANDing the PORTx Direction with NOT Pins Mask if the Required Direction is INPUT */
/* and ORing the PORTx Direction with Pins Mask if the Required Direction is OUTPUT */

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	if( u8_direction == INPUT)
 166:	41 11       	cpse	r20, r1
 168:	1c c0       	rjmp	.+56     	; 0x1a2 <gpioPinDirection+0x3c>
	{
		switch(u8_port)
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	59 f0       	breq	.+22     	; 0x184 <gpioPinDirection+0x1e>
 16e:	28 f0       	brcs	.+10     	; 0x17a <gpioPinDirection+0x14>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	69 f0       	breq	.+26     	; 0x18e <gpioPinDirection+0x28>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	81 f0       	breq	.+32     	; 0x198 <gpioPinDirection+0x32>
 178:	08 95       	ret
		{
			case GPIOA: PORTA_DIR &= ~(u8_pins);break;
 17a:	8a b3       	in	r24, 0x1a	; 26
 17c:	60 95       	com	r22
 17e:	68 23       	and	r22, r24
 180:	6a bb       	out	0x1a, r22	; 26
 182:	08 95       	ret
			case GPIOB: PORTB_DIR &= ~(u8_pins);break;
 184:	87 b3       	in	r24, 0x17	; 23
 186:	60 95       	com	r22
 188:	68 23       	and	r22, r24
 18a:	67 bb       	out	0x17, r22	; 23
 18c:	08 95       	ret
			case GPIOC: PORTC_DIR &= ~(u8_pins);break;
 18e:	84 b3       	in	r24, 0x14	; 20
 190:	60 95       	com	r22
 192:	68 23       	and	r22, r24
 194:	64 bb       	out	0x14, r22	; 20
 196:	08 95       	ret
			case GPIOD: PORTD_DIR &= ~(u8_pins);break;
 198:	81 b3       	in	r24, 0x11	; 17
 19a:	60 95       	com	r22
 19c:	68 23       	and	r22, r24
 19e:	61 bb       	out	0x11, r22	; 17
 1a0:	08 95       	ret
			default: break;
		}
	}
	
	else if( u8_direction == OUTPUT)
 1a2:	4f 3f       	cpi	r20, 0xFF	; 255
 1a4:	b9 f4       	brne	.+46     	; 0x1d4 <gpioPinDirection+0x6e>
	{
		switch(u8_port)
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	51 f0       	breq	.+20     	; 0x1be <gpioPinDirection+0x58>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <gpioPinDirection+0x50>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	59 f0       	breq	.+22     	; 0x1c6 <gpioPinDirection+0x60>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	69 f0       	breq	.+26     	; 0x1ce <gpioPinDirection+0x68>
 1b4:	08 95       	ret
		{
			case GPIOA: PORTA_DIR |= (u8_pins);break;
 1b6:	8a b3       	in	r24, 0x1a	; 26
 1b8:	68 2b       	or	r22, r24
 1ba:	6a bb       	out	0x1a, r22	; 26
 1bc:	08 95       	ret
			case GPIOB: PORTB_DIR |= (u8_pins);break;
 1be:	87 b3       	in	r24, 0x17	; 23
 1c0:	68 2b       	or	r22, r24
 1c2:	67 bb       	out	0x17, r22	; 23
 1c4:	08 95       	ret
			case GPIOC: PORTC_DIR |= (u8_pins);break;
 1c6:	84 b3       	in	r24, 0x14	; 20
 1c8:	68 2b       	or	r22, r24
 1ca:	64 bb       	out	0x14, r22	; 20
 1cc:	08 95       	ret
			case GPIOD: PORTD_DIR |= (u8_pins);break;
 1ce:	81 b3       	in	r24, 0x11	; 17
 1d0:	68 2b       	or	r22, r24
 1d2:	61 bb       	out	0x11, r22	; 17
 1d4:	08 95       	ret

000001d6 <gpioPinWrite>:
/* After that we make sure of the value by ANDing the Pin Mask with the desired value*/
/* Finally ORing PORTx DATA with the value*/
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	uint8_t temp_reg;
	switch(u8_port)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	71 f0       	breq	.+28     	; 0x1f6 <gpioPinWrite+0x20>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <gpioPinWrite+0x10>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	99 f0       	breq	.+38     	; 0x206 <gpioPinWrite+0x30>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	c9 f0       	breq	.+50     	; 0x216 <gpioPinWrite+0x40>
 1e4:	08 95       	ret
	{
		case GPIOA:
		{
			 temp_reg = PORTA_DATA & ~(u8_pins);
 1e6:	8b b3       	in	r24, 0x1b	; 27
			 u8_value = (u8_pins & u8_value);
			 PORTA_DATA = temp_reg |u8_value ;
 1e8:	96 2f       	mov	r25, r22
 1ea:	90 95       	com	r25
 1ec:	89 23       	and	r24, r25
 1ee:	46 23       	and	r20, r22
 1f0:	48 2b       	or	r20, r24
 1f2:	4b bb       	out	0x1b, r20	; 27
			 break;
 1f4:	08 95       	ret
		}
		case GPIOB:
		{ 
			temp_reg = PORTB_DATA & ~(u8_pins);
 1f6:	88 b3       	in	r24, 0x18	; 24
			u8_value = (u8_pins & u8_value);
			PORTB_DATA = temp_reg | ( u8_value);
 1f8:	96 2f       	mov	r25, r22
 1fa:	90 95       	com	r25
 1fc:	89 23       	and	r24, r25
 1fe:	46 23       	and	r20, r22
 200:	48 2b       	or	r20, r24
 202:	48 bb       	out	0x18, r20	; 24
			break;
 204:	08 95       	ret
		}
		case GPIOC:
		{
			temp_reg = PORTC_DATA & ~(u8_pins);
 206:	85 b3       	in	r24, 0x15	; 21
			u8_value = (u8_pins & u8_value);
			PORTC_DATA = temp_reg | ( u8_value);
 208:	96 2f       	mov	r25, r22
 20a:	90 95       	com	r25
 20c:	89 23       	and	r24, r25
 20e:	46 23       	and	r20, r22
 210:	48 2b       	or	r20, r24
 212:	45 bb       	out	0x15, r20	; 21
			break;
 214:	08 95       	ret
		}
		case GPIOD:
		{
			temp_reg = PORTD_DATA & ~(u8_pins);
 216:	82 b3       	in	r24, 0x12	; 18
			u8_value =(u8_pins & u8_value);
			PORTD_DATA = temp_reg | (u8_value);
 218:	96 2f       	mov	r25, r22
 21a:	90 95       	com	r25
 21c:	89 23       	and	r24, r25
 21e:	46 23       	and	r20, r22
 220:	48 2b       	or	r20, r24
 222:	42 bb       	out	0x12, r20	; 18
 224:	08 95       	ret

00000226 <HwPWMInit>:
 *  Author: A_ayman
 */ 

#include "HwPWM.h"
void HwPWMInit(void)
{
 226:	af 92       	push	r10
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
	 gpioPinDirection(GPIOD,BIT5,OUTPUT); //set oc1 as output
 234:	4f ef       	ldi	r20, 0xFF	; 255
 236:	60 e2       	ldi	r22, 0x20	; 32
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
	 gpioPinDirection(GPIOD,BIT4,OUTPUT);
 23e:	4f ef       	ldi	r20, 0xFF	; 255
 240:	60 e1       	ldi	r22, 0x10	; 16
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
	 timer1Init(T1_PhaseCorrect_MODE_ICR1_TOP ,T1_OC1A_CLEAR|T1_OC1B_CLEAR,T1_PRESCALER_256, 0, 0,0,0, T1_POLLING);
 248:	a1 2c       	mov	r10, r1
 24a:	c1 2c       	mov	r12, r1
 24c:	d1 2c       	mov	r13, r1
 24e:	e1 2c       	mov	r14, r1
 250:	f1 2c       	mov	r15, r1
 252:	00 e0       	ldi	r16, 0x00	; 0
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	44 e0       	ldi	r20, 0x04	; 4
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 ea       	ldi	r23, 0xA0	; 160
 260:	80 e1       	ldi	r24, 0x10	; 16
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	0e 94 28 03 	call	0x650	; 0x650 <timer1Init>

}
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	df 90       	pop	r13
 272:	cf 90       	pop	r12
 274:	af 90       	pop	r10
 276:	08 95       	ret

00000278 <HwPWMSetDuty>:

void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency)
{
	 uint32_t OCR1A_counts=0;
	 switch (a_u32_frequency)
 278:	42 33       	cpi	r20, 0x32	; 50
 27a:	51 05       	cpc	r21, r1
 27c:	61 05       	cpc	r22, r1
 27e:	71 05       	cpc	r23, r1
 280:	31 f0       	breq	.+12     	; 0x28e <HwPWMSetDuty+0x16>
 282:	44 36       	cpi	r20, 0x64	; 100
 284:	51 05       	cpc	r21, r1
 286:	61 05       	cpc	r22, r1
 288:	71 05       	cpc	r23, r1
 28a:	a1 f0       	breq	.+40     	; 0x2b4 <HwPWMSetDuty+0x3c>
 28c:	1b c0       	rjmp	.+54     	; 0x2c4 <HwPWMSetDuty+0x4c>
	 {
		 /*We Get PWM_PERIOD in sec from the given frequency, As time =(1/frequency)*/
		 case (T0_FERQ_50) :
		 {
			   ICR1 =1250;
 28e:	22 ee       	ldi	r18, 0xE2	; 226
 290:	34 e0       	ldi	r19, 0x04	; 4
 292:	37 bd       	out	0x27, r19	; 39
 294:	26 bd       	out	0x26, r18	; 38
				OCR1A_counts=12.5*a_u8_duty;
 296:	68 2f       	mov	r22, r24
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 01 04 	call	0x802	; 0x802 <__floatsisf>
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	48 e4       	ldi	r20, 0x48	; 72
 2a8:	51 e4       	ldi	r21, 0x41	; 65
 2aa:	0e 94 b1 04 	call	0x962	; 0x962 <__mulsf3>
 2ae:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fixunssfsi>
			   break;
 2b2:	0b c0       	rjmp	.+22     	; 0x2ca <HwPWMSetDuty+0x52>
		 }
		 case (T0_FERQ_100): ICR1 =10000; break;
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	97 e2       	ldi	r25, 0x27	; 39
 2b8:	97 bd       	out	0x27, r25	; 39
 2ba:	86 bd       	out	0x26, r24	; 38

}

void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency)
{
	 uint32_t OCR1A_counts=0;
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	cb 01       	movw	r24, r22
		 {
			   ICR1 =1250;
				OCR1A_counts=12.5*a_u8_duty;
			   break;
		 }
		 case (T0_FERQ_100): ICR1 =10000; break;
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <HwPWMSetDuty+0x52>

}

void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency)
{
	 uint32_t OCR1A_counts=0;
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	cb 01       	movw	r24, r22
		 case (T0_FERQ_100): ICR1 =10000; break;
// 		 case (T0_FERQ_200): pwm_period=0.005;  break;
	 }
	 
	
	 OCR1A=OCR1A_counts;
 2ca:	7b bd       	out	0x2b, r23	; 43
 2cc:	6a bd       	out	0x2a, r22	; 42
	 OCR1B=OCR1A_counts;
 2ce:	79 bd       	out	0x29, r23	; 41
 2d0:	68 bd       	out	0x28, r22	; 40

	 
	 //(a_u8_duty*20000)/100.0
	 timer1Start();
 2d2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <timer1Start>
 2d6:	08 95       	ret

000002d8 <Led_Init>:
#include "gpio.h"
/* This function is used to configure the direction of the led Pins as OUTPUT*/
/* Based on gpioPinDirection function */
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	61 f0       	breq	.+24     	; 0x2f4 <Led_Init+0x1c>
 2dc:	28 f0       	brcs	.+10     	; 0x2e8 <Led_Init+0x10>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	79 f0       	breq	.+30     	; 0x300 <Led_Init+0x28>
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	99 f0       	breq	.+38     	; 0x30c <Led_Init+0x34>
 2e6:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
 2e8:	4f ef       	ldi	r20, 0xFF	; 255
 2ea:	60 e1       	ldi	r22, 0x10	; 16
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
			break;
 2f2:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
 2f4:	4f ef       	ldi	r20, 0xFF	; 255
 2f6:	60 e2       	ldi	r22, 0x20	; 32
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
			break;
 2fe:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
 300:	4f ef       	ldi	r20, 0xFF	; 255
 302:	60 e4       	ldi	r22, 0x40	; 64
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
			break;
 30a:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
 30c:	4f ef       	ldi	r20, 0xFF	; 255
 30e:	60 e8       	ldi	r22, 0x80	; 128
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
 316:	08 95       	ret

00000318 <main>:
#include "dcMotor.h"

int main(void)
{
	 
	 sei();
 318:	78 94       	sei
	 SwICU_Init(SwICU_EdgeRisiging);
 31a:	80 e4       	ldi	r24, 0x40	; 64
 31c:	0e 94 37 02 	call	0x46e	; 0x46e <SwICU_Init>
	 Led_Init(LED_0);
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Led_Init>
	 Led_Init(LED_1);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Led_Init>
	 Led_Init(LED_2);
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Led_Init>
	 Led_Init(LED_3);
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Led_Init>
	 gpioPinDirection(GPIOA,BIT0,OUTPUT);
 338:	4f ef       	ldi	r20, 0xFF	; 255
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
	 uint16_t time_calc =0;
	 uint16_t Ov_flow_ticks =0;
	 uint16_t Ticks_Number =0;
	 uint8_t Distanc=0;
    /* Replace with your application code */
	 HwPWMInit();
 342:	0e 94 13 01 	call	0x226	; 0x226 <HwPWMInit>
	 MotorDC_Init(MOT_1);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 3e 00 	call	0x7c	; 0x7c <MotorDC_Init>
	 MotorDC_Init(MOT_2);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 3e 00 	call	0x7c	; 0x7c <MotorDC_Init>
	 MotorDC_Dir(MOT_1, FORWARD);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
	 MotorDC_Dir(MOT_2, FORWARD);
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
	 HwPWMSetDuty(50,50);	
 362:	42 e3       	ldi	r20, 0x32	; 50
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	82 e3       	ldi	r24, 0x32	; 50
 36c:	0e 94 3c 01 	call	0x278	; 0x278 <HwPWMSetDuty>
		  time_calc=Ticks_Number*16;
		  Distanc=((time_calc)/58);
		 
		  if (Distanc>=15)
		  {
			  Distanc=15;
 370:	df e0       	ldi	r29, 0x0F	; 15
	 HwPWMSetDuty(50,50);	
	 
    while (1) 
    {
		  	  
		  gpioPinWrite(GPIOA,BIT0,HIGH);
 372:	4f ef       	ldi	r20, 0xFF	; 255
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	89 ef       	ldi	r24, 0xF9	; 249
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <main+0x68>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x6e>
 386:	00 00       	nop
        _delay_ms(1);
		  gpioPinWrite(GPIOA,BIT0,LOW);
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
		  while(mission_complete!=2);
 392:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <mission_complete>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0x7a>
		  Ticks_Number=(TCNT0);
 39a:	22 b7       	in	r18, 0x32	; 50
		  time_calc=Ticks_Number*16;
		  Distanc=((time_calc)/58);
 39c:	90 e1       	ldi	r25, 0x10	; 16
 39e:	29 9f       	mul	r18, r25
 3a0:	90 01       	movw	r18, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	af e9       	ldi	r26, 0x9F	; 159
 3a6:	b6 e4       	ldi	r27, 0x46	; 70
 3a8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__umulhisi3>
 3ac:	92 95       	swap	r25
 3ae:	82 95       	swap	r24
 3b0:	8f 70       	andi	r24, 0x0F	; 15
 3b2:	89 27       	eor	r24, r25
 3b4:	9f 70       	andi	r25, 0x0F	; 15
 3b6:	89 27       	eor	r24, r25
 3b8:	c8 2f       	mov	r28, r24
		 
		  if (Distanc>=15)
 3ba:	8f 30       	cpi	r24, 0x0F	; 15
 3bc:	d8 f4       	brcc	.+54     	; 0x3f4 <main+0xdc>
		  {
			  Distanc=15;
		  }
		  if (Distanc<=5)
 3be:	86 30       	cpi	r24, 0x06	; 6
 3c0:	d0 f4       	brcc	.+52     	; 0x3f6 <main+0xde>
		  {
			   MotorDC_Dir(MOT_1, STOP);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
				MotorDC_Dir(MOT_2, STOP);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
				HwPWMSetDuty(0,50);		
 3d2:	42 e3       	ldi	r20, 0x32	; 50
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 3c 01 	call	0x278	; 0x278 <HwPWMSetDuty>
 3e0:	2f e3       	ldi	r18, 0x3F	; 63
 3e2:	8d e0       	ldi	r24, 0x0D	; 13
 3e4:	93 e0       	ldi	r25, 0x03	; 3
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0xce>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0xd8>
 3f0:	00 00       	nop
 3f2:	10 c0       	rjmp	.+32     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		  time_calc=Ticks_Number*16;
		  Distanc=((time_calc)/58);
		 
		  if (Distanc>=15)
		  {
			  Distanc=15;
 3f4:	cd 2f       	mov	r28, r29
				 _delay_ms(1000);

		  }
		 else
		 {
			   MotorDC_Dir(MOT_1, FORWARD);
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
			   MotorDC_Dir(MOT_2, FORWARD);
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
			   HwPWMSetDuty(50,50);
 406:	42 e3       	ldi	r20, 0x32	; 50
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	82 e3       	ldi	r24, 0x32	; 50
 410:	0e 94 3c 01 	call	0x278	; 0x278 <HwPWMSetDuty>
			  
		 }
		  gpioPinWrite(GPIOB,BIT4|BIT5|BIT6|BIT7,(Distanc<<4));
 414:	4c 2f       	mov	r20, r28
 416:	42 95       	swap	r20
 418:	40 7f       	andi	r20, 0xF0	; 240
 41a:	60 ef       	ldi	r22, 0xF0	; 240
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
		  TCNT0=0;
 422:	12 be       	out	0x32, r1	; 50
 424:	87 ea       	ldi	r24, 0xA7	; 167
 426:	91 e6       	ldi	r25, 0x61	; 97
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
		  _delay_ms(100);
		  mission_complete=0;
 430:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <mission_complete>
 		  flag=0;
 434:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <flag>

		  
    }
 438:	9c cf       	rjmp	.-200    	; 0x372 <main+0x5a>

0000043a <SwICU_Enable>:
	  timer0Stop();
 }

void SwICU_Enable()
 {
	  sei();
 43a:	78 94       	sei
	  GICR|=INT2;
 43c:	8b b7       	in	r24, 0x3b	; 59
 43e:	80 62       	ori	r24, 0x20	; 32
 440:	8b bf       	out	0x3b, r24	; 59
 442:	08 95       	ret

00000444 <SwICU_Disable>:
	  
 }
void SwICU_Disable()
 {
	 
	  GICR&=~(INT2);
 444:	8b b7       	in	r24, 0x3b	; 59
 446:	8f 7d       	andi	r24, 0xDF	; 223
 448:	8b bf       	out	0x3b, r24	; 59
 44a:	08 95       	ret

0000044c <SwICU_SetCfgEdge>:
     timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_256,0,0,T0_INTERRUPT_NORMAL);
	  SwICU_SetCfgEdge(a_en_inputCaptureEdge);
	  gpioPinDirection(INT_2_GPIO,INT_2_BIT,INPUT);
 }
void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdgeedge)
 {
 44c:	cf 93       	push	r28
 44e:	c8 2f       	mov	r28, r24
	  SwICU_Disable();
 450:	0e 94 22 02 	call	0x444	; 0x444 <SwICU_Disable>
	  MCUCSR&=~ISC2;
 454:	84 b7       	in	r24, 0x34	; 52
 456:	8f 7b       	andi	r24, 0xBF	; 191
 458:	84 bf       	out	0x34, r24	; 52
	  MCUCSR|=a_en_inputCaptureEdgeedge; //set edge;
 45a:	84 b7       	in	r24, 0x34	; 52
 45c:	c8 2b       	or	r28, r24
 45e:	c4 bf       	out	0x34, r28	; 52
	  GIFR&=~INTF2;
 460:	8a b7       	in	r24, 0x3a	; 58
 462:	8f 7d       	andi	r24, 0xDF	; 223
 464:	8a bf       	out	0x3a, r24	; 58
	  SwICU_Enable();
 466:	0e 94 1d 02 	call	0x43a	; 0x43a <SwICU_Enable>
	 
 }
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <SwICU_Init>:
 */ 
#include "SwICU.h"
#include "timers.h"

void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
 {
 46e:	ef 92       	push	r14
 470:	0f 93       	push	r16
 472:	cf 93       	push	r28
 474:	c8 2f       	mov	r28, r24
     timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_256,0,0,T0_INTERRUPT_NORMAL);
 476:	ee 24       	eor	r14, r14
 478:	e3 94       	inc	r14
 47a:	00 e0       	ldi	r16, 0x00	; 0
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	44 e0       	ldi	r20, 0x04	; 4
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 8c 02 	call	0x518	; 0x518 <timer0Init>
	  SwICU_SetCfgEdge(a_en_inputCaptureEdge);
 488:	8c 2f       	mov	r24, r28
 48a:	0e 94 26 02 	call	0x44c	; 0x44c <SwICU_SetCfgEdge>
	  gpioPinDirection(INT_2_GPIO,INT_2_BIT,INPUT);
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	64 e0       	ldi	r22, 0x04	; 4
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 b3 00 	call	0x166	; 0x166 <gpioPinDirection>
 }
 498:	cf 91       	pop	r28
 49a:	0f 91       	pop	r16
 49c:	ef 90       	pop	r14
 49e:	08 95       	ret

000004a0 <__vector_3>:
	   
 }
 
 //
 ISR(INT2_vect)
 {
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	 switch (flag)
 4c2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flag>
 4c6:	88 23       	and	r24, r24
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <__vector_3+0x30>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	51 f0       	breq	.+20     	; 0x4e2 <__vector_3+0x42>
 4ce:	13 c0       	rjmp	.+38     	; 0x4f6 <__vector_3+0x56>
	  *( a_pu8_capt)=timer0Read();
 }
 
void SwICU_Start()
 {
	 timer0Start();
 4d0:	0e 94 a1 02 	call	0x542	; 0x542 <timer0Start>
 {
	 switch (flag)
	 {
		 case 0:
		 SwICU_Start();
		 SwICU_SetCfgEdge(SwICU_EdgeFalling);
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 26 02 	call	0x44c	; 0x44c <SwICU_SetCfgEdge>
		 flag=1;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <flag>
		 break;
 4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <__vector_3+0x56>
 {
	 timer0Start();
 }
void SwICU_Stop()
 {
	  timer0Stop();
 4e2:	0e 94 a7 02 	call	0x54e	; 0x54e <timer0Stop>
		 break;
		 
		 case 1:
		 {
			 SwICU_Stop();
			 SwICU_SetCfgEdge(SwICU_EdgeRisiging);
 4e6:	80 e4       	ldi	r24, 0x40	; 64
 4e8:	0e 94 26 02 	call	0x44c	; 0x44c <SwICU_SetCfgEdge>
			 flag=2;
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <flag>
			 mission_complete=2;
 4f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <mission_complete>
		 
		 
	 }
	 
	 
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <timer0Init>:
	Timer_initial_value= 256-interrupt_counts;//200
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64,Timer_initial_value,0,T0_INTERRUPT_NORMAL);
	timer0Start();
	TCNT0=Timer_initial_value;
	gpioPinWrite(T0_PWM_GPIO,T0_PWM_BIT,HIGH);
}
 518:	ef 92       	push	r14
 51a:	0f 93       	push	r16
 51c:	93 b7       	in	r25, 0x33	; 51
 51e:	90 68       	ori	r25, 0x80	; 128
 520:	93 bf       	out	0x33, r25	; 51
 522:	93 b7       	in	r25, 0x33	; 51
 524:	89 2b       	or	r24, r25
 526:	83 bf       	out	0x33, r24	; 51
 528:	83 b7       	in	r24, 0x33	; 51
 52a:	68 2b       	or	r22, r24
 52c:	63 bf       	out	0x33, r22	; 51
 52e:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>
 532:	22 bf       	out	0x32, r18	; 50
 534:	0c bf       	out	0x3c, r16	; 60
 536:	89 b7       	in	r24, 0x39	; 57
 538:	e8 2a       	or	r14, r24
 53a:	e9 be       	out	0x39, r14	; 57
 53c:	0f 91       	pop	r16
 53e:	ef 90       	pop	r14
 540:	08 95       	ret

00000542 <timer0Start>:
 542:	93 b7       	in	r25, 0x33	; 51
 544:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 548:	89 2b       	or	r24, r25
 54a:	83 bf       	out	0x33, r24	; 51
 54c:	08 95       	ret

0000054e <timer0Stop>:
 54e:	83 b7       	in	r24, 0x33	; 51
 550:	88 7f       	andi	r24, 0xF8	; 248
 552:	83 bf       	out	0x33, r24	; 51
 554:	83 b7       	in	r24, 0x33	; 51
 556:	83 bf       	out	0x33, r24	; 51
 558:	08 95       	ret

0000055a <__vector_11>:
/*
/** ISR Responsible for generate software PWM
*/

ISR(TIMER0_OVF_vect)
{	
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	cf 92       	push	r12
 566:	df 92       	push	r13
 568:	ef 92       	push	r14
 56a:	ff 92       	push	r15
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	 if((ov_counts ) == (Gu8_dutyCycle)) ////
 584:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Gu8_dutyCycle>
 588:	c0 90 61 00 	lds	r12, 0x0061	; 0x800061 <ov_counts>
 58c:	d0 90 62 00 	lds	r13, 0x0062	; 0x800062 <ov_counts+0x1>
 590:	e0 90 63 00 	lds	r14, 0x0063	; 0x800063 <ov_counts+0x2>
 594:	f0 90 64 00 	lds	r15, 0x0064	; 0x800064 <ov_counts+0x3>
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 01 04 	call	0x802	; 0x802 <__floatsisf>
 5a2:	a7 01       	movw	r20, r14
 5a4:	96 01       	movw	r18, r12
 5a6:	0e 94 cb 03 	call	0x796	; 0x796 <__cmpsf2>
 5aa:	81 11       	cpse	r24, r1
 5ac:	06 c0       	rjmp	.+12     	; 0x5ba <__vector_11+0x60>
	 {
	 		gpioPinWrite(T0_PWM_GPIO,T0_PWM_BIT,LOW) ;
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
 5b8:	1d c0       	rjmp	.+58     	; 0x5f4 <__vector_11+0x9a>
		   /*Led_On(LED_0);*/
	 }
	 else if(ov_counts ==100)
 5ba:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <ov_counts>
 5be:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <ov_counts+0x1>
 5c2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ov_counts+0x2>
 5c6:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <ov_counts+0x3>
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	48 ec       	ldi	r20, 0xC8	; 200
 5d0:	52 e4       	ldi	r21, 0x42	; 66
 5d2:	0e 94 cb 03 	call	0x796	; 0x796 <__cmpsf2>
 5d6:	81 11       	cpse	r24, r1
 5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <__vector_11+0x9a>
	 {
		  ov_counts=0;
 5da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <ov_counts>
 5de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ov_counts+0x1>
 5e2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ov_counts+0x2>
 5e6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <ov_counts+0x3>
		  gpioPinWrite(T0_PWM_GPIO,T0_PWM_BIT,HIGH) ;
 5ea:	4f ef       	ldi	r20, 0xFF	; 255
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <gpioPinWrite>
		  /*Led_Off(LED_0);*/
	 }
	 ov_counts++;
 5f4:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <ov_counts>
 5f8:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <ov_counts+0x1>
 5fc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ov_counts+0x2>
 600:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <ov_counts+0x3>
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	40 e8       	ldi	r20, 0x80	; 128
 60a:	5f e3       	ldi	r21, 0x3F	; 63
 60c:	0e 94 5f 03 	call	0x6be	; 0x6be <__addsf3>
 610:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <ov_counts>
 614:	70 93 62 00 	sts	0x0062, r23	; 0x800062 <ov_counts+0x1>
 618:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ov_counts+0x2>
 61c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <ov_counts+0x3>
	 TCNT0=Timer_initial_value;
 620:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Timer_initial_value>
 624:	82 bf       	out	0x32, r24	; 50
}
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	ff 90       	pop	r15
 640:	ef 90       	pop	r14
 642:	df 90       	pop	r13
 644:	cf 90       	pop	r12
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <timer1Init>:
/////////////////////////////timer1///////////////////////
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
 650:	af 92       	push	r10
 652:	cf 92       	push	r12
 654:	df 92       	push	r13
 656:	ef 92       	push	r14
 658:	ff 92       	push	r15
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
	 TCCR1|=en_mode;
 65e:	ee b5       	in	r30, 0x2e	; 46
 660:	ff b5       	in	r31, 0x2f	; 47
 662:	8e 2b       	or	r24, r30
 664:	9f 2b       	or	r25, r31
 666:	9f bd       	out	0x2f, r25	; 47
 668:	8e bd       	out	0x2e, r24	; 46
	 TCCR1|=en_OC;
 66a:	8e b5       	in	r24, 0x2e	; 46
 66c:	9f b5       	in	r25, 0x2f	; 47
 66e:	68 2b       	or	r22, r24
 670:	79 2b       	or	r23, r25
 672:	7f bd       	out	0x2f, r23	; 47
 674:	6e bd       	out	0x2e, r22	; 46
    gu16_Timer1_Prescaler=en_prescal;
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	50 93 68 00 	sts	0x0068, r21	; 0x800068 <gu16_Timer1_Prescaler+0x1>
 67c:	40 93 67 00 	sts	0x0067, r20	; 0x800067 <gu16_Timer1_Prescaler>
	 TCNT1=u16_initialValue;
 680:	3d bd       	out	0x2d, r19	; 45
 682:	2c bd       	out	0x2c, r18	; 44
	 OCR1A=u16_outputCompareA;
 684:	1b bd       	out	0x2b, r17	; 43
 686:	0a bd       	out	0x2a, r16	; 42
	 OCR1B=u16_outputCompareB;
 688:	f9 bc       	out	0x29, r15	; 41
 68a:	e8 bc       	out	0x28, r14	; 40
	 ICR1=u16_inputCapture;
 68c:	d7 bc       	out	0x27, r13	; 39
 68e:	c6 bc       	out	0x26, r12	; 38
	 TIMSK|=en_interruptMask;
 690:	89 b7       	in	r24, 0x39	; 57
 692:	a8 2a       	or	r10, r24
 694:	a9 be       	out	0x39, r10	; 57
}
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	df 90       	pop	r13
 6a0:	cf 90       	pop	r12
 6a2:	af 90       	pop	r10
 6a4:	08 95       	ret

000006a6 <timer1Start>:
	 timer1Start();
}

void timer1Start(void)
{
	 TCCR1|=gu16_Timer1_Prescaler;
 6a6:	2e b5       	in	r18, 0x2e	; 46
 6a8:	3f b5       	in	r19, 0x2f	; 47
 6aa:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu16_Timer1_Prescaler>
 6ae:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <gu16_Timer1_Prescaler+0x1>
 6b2:	82 2b       	or	r24, r18
 6b4:	93 2b       	or	r25, r19
 6b6:	9f bd       	out	0x2f, r25	; 47
 6b8:	8e bd       	out	0x2e, r24	; 46
 6ba:	08 95       	ret

000006bc <__subsf3>:
 6bc:	50 58       	subi	r21, 0x80	; 128

000006be <__addsf3>:
 6be:	bb 27       	eor	r27, r27
 6c0:	aa 27       	eor	r26, r26
 6c2:	0e 94 76 03 	call	0x6ec	; 0x6ec <__addsf3x>
 6c6:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_round>
 6ca:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_pscA>
 6ce:	38 f0       	brcs	.+14     	; 0x6de <__addsf3+0x20>
 6d0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_pscB>
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__addsf3+0x20>
 6d6:	39 f4       	brne	.+14     	; 0x6e6 <__addsf3+0x28>
 6d8:	9f 3f       	cpi	r25, 0xFF	; 255
 6da:	19 f4       	brne	.+6      	; 0x6e2 <__addsf3+0x24>
 6dc:	26 f4       	brtc	.+8      	; 0x6e6 <__addsf3+0x28>
 6de:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_nan>
 6e2:	0e f4       	brtc	.+2      	; 0x6e6 <__addsf3+0x28>
 6e4:	e0 95       	com	r30
 6e6:	e7 fb       	bst	r30, 7
 6e8:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__fp_inf>

000006ec <__addsf3x>:
 6ec:	e9 2f       	mov	r30, r25
 6ee:	0e 94 88 04 	call	0x910	; 0x910 <__fp_split3>
 6f2:	58 f3       	brcs	.-42     	; 0x6ca <__addsf3+0xc>
 6f4:	ba 17       	cp	r27, r26
 6f6:	62 07       	cpc	r22, r18
 6f8:	73 07       	cpc	r23, r19
 6fa:	84 07       	cpc	r24, r20
 6fc:	95 07       	cpc	r25, r21
 6fe:	20 f0       	brcs	.+8      	; 0x708 <__addsf3x+0x1c>
 700:	79 f4       	brne	.+30     	; 0x720 <__addsf3x+0x34>
 702:	a6 f5       	brtc	.+104    	; 0x76c <__addsf3x+0x80>
 704:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_zero>
 708:	0e f4       	brtc	.+2      	; 0x70c <__addsf3x+0x20>
 70a:	e0 95       	com	r30
 70c:	0b 2e       	mov	r0, r27
 70e:	ba 2f       	mov	r27, r26
 710:	a0 2d       	mov	r26, r0
 712:	0b 01       	movw	r0, r22
 714:	b9 01       	movw	r22, r18
 716:	90 01       	movw	r18, r0
 718:	0c 01       	movw	r0, r24
 71a:	ca 01       	movw	r24, r20
 71c:	a0 01       	movw	r20, r0
 71e:	11 24       	eor	r1, r1
 720:	ff 27       	eor	r31, r31
 722:	59 1b       	sub	r21, r25
 724:	99 f0       	breq	.+38     	; 0x74c <__addsf3x+0x60>
 726:	59 3f       	cpi	r21, 0xF9	; 249
 728:	50 f4       	brcc	.+20     	; 0x73e <__addsf3x+0x52>
 72a:	50 3e       	cpi	r21, 0xE0	; 224
 72c:	68 f1       	brcs	.+90     	; 0x788 <__addsf3x+0x9c>
 72e:	1a 16       	cp	r1, r26
 730:	f0 40       	sbci	r31, 0x00	; 0
 732:	a2 2f       	mov	r26, r18
 734:	23 2f       	mov	r18, r19
 736:	34 2f       	mov	r19, r20
 738:	44 27       	eor	r20, r20
 73a:	58 5f       	subi	r21, 0xF8	; 248
 73c:	f3 cf       	rjmp	.-26     	; 0x724 <__addsf3x+0x38>
 73e:	46 95       	lsr	r20
 740:	37 95       	ror	r19
 742:	27 95       	ror	r18
 744:	a7 95       	ror	r26
 746:	f0 40       	sbci	r31, 0x00	; 0
 748:	53 95       	inc	r21
 74a:	c9 f7       	brne	.-14     	; 0x73e <__addsf3x+0x52>
 74c:	7e f4       	brtc	.+30     	; 0x76c <__addsf3x+0x80>
 74e:	1f 16       	cp	r1, r31
 750:	ba 0b       	sbc	r27, r26
 752:	62 0b       	sbc	r22, r18
 754:	73 0b       	sbc	r23, r19
 756:	84 0b       	sbc	r24, r20
 758:	ba f0       	brmi	.+46     	; 0x788 <__addsf3x+0x9c>
 75a:	91 50       	subi	r25, 0x01	; 1
 75c:	a1 f0       	breq	.+40     	; 0x786 <__addsf3x+0x9a>
 75e:	ff 0f       	add	r31, r31
 760:	bb 1f       	adc	r27, r27
 762:	66 1f       	adc	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	88 1f       	adc	r24, r24
 768:	c2 f7       	brpl	.-16     	; 0x75a <__addsf3x+0x6e>
 76a:	0e c0       	rjmp	.+28     	; 0x788 <__addsf3x+0x9c>
 76c:	ba 0f       	add	r27, r26
 76e:	62 1f       	adc	r22, r18
 770:	73 1f       	adc	r23, r19
 772:	84 1f       	adc	r24, r20
 774:	48 f4       	brcc	.+18     	; 0x788 <__addsf3x+0x9c>
 776:	87 95       	ror	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b7 95       	ror	r27
 77e:	f7 95       	ror	r31
 780:	9e 3f       	cpi	r25, 0xFE	; 254
 782:	08 f0       	brcs	.+2      	; 0x786 <__addsf3x+0x9a>
 784:	b0 cf       	rjmp	.-160    	; 0x6e6 <__addsf3+0x28>
 786:	93 95       	inc	r25
 788:	88 0f       	add	r24, r24
 78a:	08 f0       	brcs	.+2      	; 0x78e <__addsf3x+0xa2>
 78c:	99 27       	eor	r25, r25
 78e:	ee 0f       	add	r30, r30
 790:	97 95       	ror	r25
 792:	87 95       	ror	r24
 794:	08 95       	ret

00000796 <__cmpsf2>:
 796:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_cmp>
 79a:	08 f4       	brcc	.+2      	; 0x79e <__cmpsf2+0x8>
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	08 95       	ret

000007a0 <__fixunssfsi>:
 7a0:	0e 94 90 04 	call	0x920	; 0x920 <__fp_splitA>
 7a4:	88 f0       	brcs	.+34     	; 0x7c8 <__fixunssfsi+0x28>
 7a6:	9f 57       	subi	r25, 0x7F	; 127
 7a8:	98 f0       	brcs	.+38     	; 0x7d0 <__fixunssfsi+0x30>
 7aa:	b9 2f       	mov	r27, r25
 7ac:	99 27       	eor	r25, r25
 7ae:	b7 51       	subi	r27, 0x17	; 23
 7b0:	b0 f0       	brcs	.+44     	; 0x7de <__fixunssfsi+0x3e>
 7b2:	e1 f0       	breq	.+56     	; 0x7ec <__fixunssfsi+0x4c>
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	1a f0       	brmi	.+6      	; 0x7c4 <__fixunssfsi+0x24>
 7be:	ba 95       	dec	r27
 7c0:	c9 f7       	brne	.-14     	; 0x7b4 <__fixunssfsi+0x14>
 7c2:	14 c0       	rjmp	.+40     	; 0x7ec <__fixunssfsi+0x4c>
 7c4:	b1 30       	cpi	r27, 0x01	; 1
 7c6:	91 f0       	breq	.+36     	; 0x7ec <__fixunssfsi+0x4c>
 7c8:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_zero>
 7cc:	b1 e0       	ldi	r27, 0x01	; 1
 7ce:	08 95       	ret
 7d0:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_zero>
 7d4:	67 2f       	mov	r22, r23
 7d6:	78 2f       	mov	r23, r24
 7d8:	88 27       	eor	r24, r24
 7da:	b8 5f       	subi	r27, 0xF8	; 248
 7dc:	39 f0       	breq	.+14     	; 0x7ec <__fixunssfsi+0x4c>
 7de:	b9 3f       	cpi	r27, 0xF9	; 249
 7e0:	cc f3       	brlt	.-14     	; 0x7d4 <__fixunssfsi+0x34>
 7e2:	86 95       	lsr	r24
 7e4:	77 95       	ror	r23
 7e6:	67 95       	ror	r22
 7e8:	b3 95       	inc	r27
 7ea:	d9 f7       	brne	.-10     	; 0x7e2 <__fixunssfsi+0x42>
 7ec:	3e f4       	brtc	.+14     	; 0x7fc <__fixunssfsi+0x5c>
 7ee:	90 95       	com	r25
 7f0:	80 95       	com	r24
 7f2:	70 95       	com	r23
 7f4:	61 95       	neg	r22
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	8f 4f       	sbci	r24, 0xFF	; 255
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	08 95       	ret

000007fe <__floatunsisf>:
 7fe:	e8 94       	clt
 800:	09 c0       	rjmp	.+18     	; 0x814 <__floatsisf+0x12>

00000802 <__floatsisf>:
 802:	97 fb       	bst	r25, 7
 804:	3e f4       	brtc	.+14     	; 0x814 <__floatsisf+0x12>
 806:	90 95       	com	r25
 808:	80 95       	com	r24
 80a:	70 95       	com	r23
 80c:	61 95       	neg	r22
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	99 23       	and	r25, r25
 816:	a9 f0       	breq	.+42     	; 0x842 <__floatsisf+0x40>
 818:	f9 2f       	mov	r31, r25
 81a:	96 e9       	ldi	r25, 0x96	; 150
 81c:	bb 27       	eor	r27, r27
 81e:	93 95       	inc	r25
 820:	f6 95       	lsr	r31
 822:	87 95       	ror	r24
 824:	77 95       	ror	r23
 826:	67 95       	ror	r22
 828:	b7 95       	ror	r27
 82a:	f1 11       	cpse	r31, r1
 82c:	f8 cf       	rjmp	.-16     	; 0x81e <__floatsisf+0x1c>
 82e:	fa f4       	brpl	.+62     	; 0x86e <__stack+0xf>
 830:	bb 0f       	add	r27, r27
 832:	11 f4       	brne	.+4      	; 0x838 <__floatsisf+0x36>
 834:	60 ff       	sbrs	r22, 0
 836:	1b c0       	rjmp	.+54     	; 0x86e <__stack+0xf>
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	16 c0       	rjmp	.+44     	; 0x86e <__stack+0xf>
 842:	88 23       	and	r24, r24
 844:	11 f0       	breq	.+4      	; 0x84a <__floatsisf+0x48>
 846:	96 e9       	ldi	r25, 0x96	; 150
 848:	11 c0       	rjmp	.+34     	; 0x86c <__stack+0xd>
 84a:	77 23       	and	r23, r23
 84c:	21 f0       	breq	.+8      	; 0x856 <__floatsisf+0x54>
 84e:	9e e8       	ldi	r25, 0x8E	; 142
 850:	87 2f       	mov	r24, r23
 852:	76 2f       	mov	r23, r22
 854:	05 c0       	rjmp	.+10     	; 0x860 <__stack+0x1>
 856:	66 23       	and	r22, r22
 858:	71 f0       	breq	.+28     	; 0x876 <__stack+0x17>
 85a:	96 e8       	ldi	r25, 0x86	; 134
 85c:	86 2f       	mov	r24, r22
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	2a f0       	brmi	.+10     	; 0x86e <__stack+0xf>
 864:	9a 95       	dec	r25
 866:	66 0f       	add	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	da f7       	brpl	.-10     	; 0x864 <__stack+0x5>
 86e:	88 0f       	add	r24, r24
 870:	96 95       	lsr	r25
 872:	87 95       	ror	r24
 874:	97 f9       	bld	r25, 7
 876:	08 95       	ret

00000878 <__fp_cmp>:
 878:	99 0f       	add	r25, r25
 87a:	00 08       	sbc	r0, r0
 87c:	55 0f       	add	r21, r21
 87e:	aa 0b       	sbc	r26, r26
 880:	e0 e8       	ldi	r30, 0x80	; 128
 882:	fe ef       	ldi	r31, 0xFE	; 254
 884:	16 16       	cp	r1, r22
 886:	17 06       	cpc	r1, r23
 888:	e8 07       	cpc	r30, r24
 88a:	f9 07       	cpc	r31, r25
 88c:	c0 f0       	brcs	.+48     	; 0x8be <__fp_cmp+0x46>
 88e:	12 16       	cp	r1, r18
 890:	13 06       	cpc	r1, r19
 892:	e4 07       	cpc	r30, r20
 894:	f5 07       	cpc	r31, r21
 896:	98 f0       	brcs	.+38     	; 0x8be <__fp_cmp+0x46>
 898:	62 1b       	sub	r22, r18
 89a:	73 0b       	sbc	r23, r19
 89c:	84 0b       	sbc	r24, r20
 89e:	95 0b       	sbc	r25, r21
 8a0:	39 f4       	brne	.+14     	; 0x8b0 <__fp_cmp+0x38>
 8a2:	0a 26       	eor	r0, r26
 8a4:	61 f0       	breq	.+24     	; 0x8be <__fp_cmp+0x46>
 8a6:	23 2b       	or	r18, r19
 8a8:	24 2b       	or	r18, r20
 8aa:	25 2b       	or	r18, r21
 8ac:	21 f4       	brne	.+8      	; 0x8b6 <__fp_cmp+0x3e>
 8ae:	08 95       	ret
 8b0:	0a 26       	eor	r0, r26
 8b2:	09 f4       	brne	.+2      	; 0x8b6 <__fp_cmp+0x3e>
 8b4:	a1 40       	sbci	r26, 0x01	; 1
 8b6:	a6 95       	lsr	r26
 8b8:	8f ef       	ldi	r24, 0xFF	; 255
 8ba:	81 1d       	adc	r24, r1
 8bc:	81 1d       	adc	r24, r1
 8be:	08 95       	ret

000008c0 <__fp_inf>:
 8c0:	97 f9       	bld	r25, 7
 8c2:	9f 67       	ori	r25, 0x7F	; 127
 8c4:	80 e8       	ldi	r24, 0x80	; 128
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	08 95       	ret

000008cc <__fp_nan>:
 8cc:	9f ef       	ldi	r25, 0xFF	; 255
 8ce:	80 ec       	ldi	r24, 0xC0	; 192
 8d0:	08 95       	ret

000008d2 <__fp_pscA>:
 8d2:	00 24       	eor	r0, r0
 8d4:	0a 94       	dec	r0
 8d6:	16 16       	cp	r1, r22
 8d8:	17 06       	cpc	r1, r23
 8da:	18 06       	cpc	r1, r24
 8dc:	09 06       	cpc	r0, r25
 8de:	08 95       	ret

000008e0 <__fp_pscB>:
 8e0:	00 24       	eor	r0, r0
 8e2:	0a 94       	dec	r0
 8e4:	12 16       	cp	r1, r18
 8e6:	13 06       	cpc	r1, r19
 8e8:	14 06       	cpc	r1, r20
 8ea:	05 06       	cpc	r0, r21
 8ec:	08 95       	ret

000008ee <__fp_round>:
 8ee:	09 2e       	mov	r0, r25
 8f0:	03 94       	inc	r0
 8f2:	00 0c       	add	r0, r0
 8f4:	11 f4       	brne	.+4      	; 0x8fa <__fp_round+0xc>
 8f6:	88 23       	and	r24, r24
 8f8:	52 f0       	brmi	.+20     	; 0x90e <__fp_round+0x20>
 8fa:	bb 0f       	add	r27, r27
 8fc:	40 f4       	brcc	.+16     	; 0x90e <__fp_round+0x20>
 8fe:	bf 2b       	or	r27, r31
 900:	11 f4       	brne	.+4      	; 0x906 <__fp_round+0x18>
 902:	60 ff       	sbrs	r22, 0
 904:	04 c0       	rjmp	.+8      	; 0x90e <__fp_round+0x20>
 906:	6f 5f       	subi	r22, 0xFF	; 255
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__fp_split3>:
 910:	57 fd       	sbrc	r21, 7
 912:	90 58       	subi	r25, 0x80	; 128
 914:	44 0f       	add	r20, r20
 916:	55 1f       	adc	r21, r21
 918:	59 f0       	breq	.+22     	; 0x930 <__fp_splitA+0x10>
 91a:	5f 3f       	cpi	r21, 0xFF	; 255
 91c:	71 f0       	breq	.+28     	; 0x93a <__fp_splitA+0x1a>
 91e:	47 95       	ror	r20

00000920 <__fp_splitA>:
 920:	88 0f       	add	r24, r24
 922:	97 fb       	bst	r25, 7
 924:	99 1f       	adc	r25, r25
 926:	61 f0       	breq	.+24     	; 0x940 <__fp_splitA+0x20>
 928:	9f 3f       	cpi	r25, 0xFF	; 255
 92a:	79 f0       	breq	.+30     	; 0x94a <__fp_splitA+0x2a>
 92c:	87 95       	ror	r24
 92e:	08 95       	ret
 930:	12 16       	cp	r1, r18
 932:	13 06       	cpc	r1, r19
 934:	14 06       	cpc	r1, r20
 936:	55 1f       	adc	r21, r21
 938:	f2 cf       	rjmp	.-28     	; 0x91e <__fp_split3+0xe>
 93a:	46 95       	lsr	r20
 93c:	f1 df       	rcall	.-30     	; 0x920 <__fp_splitA>
 93e:	08 c0       	rjmp	.+16     	; 0x950 <__fp_splitA+0x30>
 940:	16 16       	cp	r1, r22
 942:	17 06       	cpc	r1, r23
 944:	18 06       	cpc	r1, r24
 946:	99 1f       	adc	r25, r25
 948:	f1 cf       	rjmp	.-30     	; 0x92c <__fp_splitA+0xc>
 94a:	86 95       	lsr	r24
 94c:	71 05       	cpc	r23, r1
 94e:	61 05       	cpc	r22, r1
 950:	08 94       	sec
 952:	08 95       	ret

00000954 <__fp_zero>:
 954:	e8 94       	clt

00000956 <__fp_szero>:
 956:	bb 27       	eor	r27, r27
 958:	66 27       	eor	r22, r22
 95a:	77 27       	eor	r23, r23
 95c:	cb 01       	movw	r24, r22
 95e:	97 f9       	bld	r25, 7
 960:	08 95       	ret

00000962 <__mulsf3>:
 962:	0e 94 c4 04 	call	0x988	; 0x988 <__mulsf3x>
 966:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_round>
 96a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_pscA>
 96e:	38 f0       	brcs	.+14     	; 0x97e <__mulsf3+0x1c>
 970:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_pscB>
 974:	20 f0       	brcs	.+8      	; 0x97e <__mulsf3+0x1c>
 976:	95 23       	and	r25, r21
 978:	11 f0       	breq	.+4      	; 0x97e <__mulsf3+0x1c>
 97a:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__fp_inf>
 97e:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_nan>
 982:	11 24       	eor	r1, r1
 984:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_szero>

00000988 <__mulsf3x>:
 988:	0e 94 88 04 	call	0x910	; 0x910 <__fp_split3>
 98c:	70 f3       	brcs	.-36     	; 0x96a <__mulsf3+0x8>

0000098e <__mulsf3_pse>:
 98e:	95 9f       	mul	r25, r21
 990:	c1 f3       	breq	.-16     	; 0x982 <__mulsf3+0x20>
 992:	95 0f       	add	r25, r21
 994:	50 e0       	ldi	r21, 0x00	; 0
 996:	55 1f       	adc	r21, r21
 998:	62 9f       	mul	r22, r18
 99a:	f0 01       	movw	r30, r0
 99c:	72 9f       	mul	r23, r18
 99e:	bb 27       	eor	r27, r27
 9a0:	f0 0d       	add	r31, r0
 9a2:	b1 1d       	adc	r27, r1
 9a4:	63 9f       	mul	r22, r19
 9a6:	aa 27       	eor	r26, r26
 9a8:	f0 0d       	add	r31, r0
 9aa:	b1 1d       	adc	r27, r1
 9ac:	aa 1f       	adc	r26, r26
 9ae:	64 9f       	mul	r22, r20
 9b0:	66 27       	eor	r22, r22
 9b2:	b0 0d       	add	r27, r0
 9b4:	a1 1d       	adc	r26, r1
 9b6:	66 1f       	adc	r22, r22
 9b8:	82 9f       	mul	r24, r18
 9ba:	22 27       	eor	r18, r18
 9bc:	b0 0d       	add	r27, r0
 9be:	a1 1d       	adc	r26, r1
 9c0:	62 1f       	adc	r22, r18
 9c2:	73 9f       	mul	r23, r19
 9c4:	b0 0d       	add	r27, r0
 9c6:	a1 1d       	adc	r26, r1
 9c8:	62 1f       	adc	r22, r18
 9ca:	83 9f       	mul	r24, r19
 9cc:	a0 0d       	add	r26, r0
 9ce:	61 1d       	adc	r22, r1
 9d0:	22 1f       	adc	r18, r18
 9d2:	74 9f       	mul	r23, r20
 9d4:	33 27       	eor	r19, r19
 9d6:	a0 0d       	add	r26, r0
 9d8:	61 1d       	adc	r22, r1
 9da:	23 1f       	adc	r18, r19
 9dc:	84 9f       	mul	r24, r20
 9de:	60 0d       	add	r22, r0
 9e0:	21 1d       	adc	r18, r1
 9e2:	82 2f       	mov	r24, r18
 9e4:	76 2f       	mov	r23, r22
 9e6:	6a 2f       	mov	r22, r26
 9e8:	11 24       	eor	r1, r1
 9ea:	9f 57       	subi	r25, 0x7F	; 127
 9ec:	50 40       	sbci	r21, 0x00	; 0
 9ee:	9a f0       	brmi	.+38     	; 0xa16 <__mulsf3_pse+0x88>
 9f0:	f1 f0       	breq	.+60     	; 0xa2e <__mulsf3_pse+0xa0>
 9f2:	88 23       	and	r24, r24
 9f4:	4a f0       	brmi	.+18     	; 0xa08 <__mulsf3_pse+0x7a>
 9f6:	ee 0f       	add	r30, r30
 9f8:	ff 1f       	adc	r31, r31
 9fa:	bb 1f       	adc	r27, r27
 9fc:	66 1f       	adc	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	91 50       	subi	r25, 0x01	; 1
 a04:	50 40       	sbci	r21, 0x00	; 0
 a06:	a9 f7       	brne	.-22     	; 0x9f2 <__mulsf3_pse+0x64>
 a08:	9e 3f       	cpi	r25, 0xFE	; 254
 a0a:	51 05       	cpc	r21, r1
 a0c:	80 f0       	brcs	.+32     	; 0xa2e <__mulsf3_pse+0xa0>
 a0e:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__fp_inf>
 a12:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_szero>
 a16:	5f 3f       	cpi	r21, 0xFF	; 255
 a18:	e4 f3       	brlt	.-8      	; 0xa12 <__mulsf3_pse+0x84>
 a1a:	98 3e       	cpi	r25, 0xE8	; 232
 a1c:	d4 f3       	brlt	.-12     	; 0xa12 <__mulsf3_pse+0x84>
 a1e:	86 95       	lsr	r24
 a20:	77 95       	ror	r23
 a22:	67 95       	ror	r22
 a24:	b7 95       	ror	r27
 a26:	f7 95       	ror	r31
 a28:	e7 95       	ror	r30
 a2a:	9f 5f       	subi	r25, 0xFF	; 255
 a2c:	c1 f7       	brne	.-16     	; 0xa1e <__mulsf3_pse+0x90>
 a2e:	fe 2b       	or	r31, r30
 a30:	88 0f       	add	r24, r24
 a32:	91 1d       	adc	r25, r1
 a34:	96 95       	lsr	r25
 a36:	87 95       	ror	r24
 a38:	97 f9       	bld	r25, 7
 a3a:	08 95       	ret

00000a3c <__umulhisi3>:
 a3c:	a2 9f       	mul	r26, r18
 a3e:	b0 01       	movw	r22, r0
 a40:	b3 9f       	mul	r27, r19
 a42:	c0 01       	movw	r24, r0
 a44:	a3 9f       	mul	r26, r19
 a46:	70 0d       	add	r23, r0
 a48:	81 1d       	adc	r24, r1
 a4a:	11 24       	eor	r1, r1
 a4c:	91 1d       	adc	r25, r1
 a4e:	b2 9f       	mul	r27, r18
 a50:	70 0d       	add	r23, r0
 a52:	81 1d       	adc	r24, r1
 a54:	11 24       	eor	r1, r1
 a56:	91 1d       	adc	r25, r1
 a58:	08 95       	ret

00000a5a <_exit>:
 a5a:	f8 94       	cli

00000a5c <__stop_program>:
 a5c:	ff cf       	rjmp	.-2      	; 0xa5c <__stop_program>
